//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Condition.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace dittlassian.Utilities.ConditionParser {
using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="ConditionParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public interface IConditionListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="ConditionParser.parse"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParse([NotNull] ConditionParser.ParseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ConditionParser.parse"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParse([NotNull] ConditionParser.ParseContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>binaryExpression</c>
	/// labeled alternative in <see cref="ConditionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBinaryExpression([NotNull] ConditionParser.BinaryExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>binaryExpression</c>
	/// labeled alternative in <see cref="ConditionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBinaryExpression([NotNull] ConditionParser.BinaryExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>decimalExpression</c>
	/// labeled alternative in <see cref="ConditionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDecimalExpression([NotNull] ConditionParser.DecimalExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>decimalExpression</c>
	/// labeled alternative in <see cref="ConditionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDecimalExpression([NotNull] ConditionParser.DecimalExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>stringExpression</c>
	/// labeled alternative in <see cref="ConditionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStringExpression([NotNull] ConditionParser.StringExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>stringExpression</c>
	/// labeled alternative in <see cref="ConditionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStringExpression([NotNull] ConditionParser.StringExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>boolExpression</c>
	/// labeled alternative in <see cref="ConditionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBoolExpression([NotNull] ConditionParser.BoolExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>boolExpression</c>
	/// labeled alternative in <see cref="ConditionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBoolExpression([NotNull] ConditionParser.BoolExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>identifierExpression</c>
	/// labeled alternative in <see cref="ConditionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdentifierExpression([NotNull] ConditionParser.IdentifierExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>identifierExpression</c>
	/// labeled alternative in <see cref="ConditionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdentifierExpression([NotNull] ConditionParser.IdentifierExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>notExpression</c>
	/// labeled alternative in <see cref="ConditionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNotExpression([NotNull] ConditionParser.NotExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>notExpression</c>
	/// labeled alternative in <see cref="ConditionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNotExpression([NotNull] ConditionParser.NotExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>parenExpression</c>
	/// labeled alternative in <see cref="ConditionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParenExpression([NotNull] ConditionParser.ParenExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>parenExpression</c>
	/// labeled alternative in <see cref="ConditionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParenExpression([NotNull] ConditionParser.ParenExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>comparatorExpression</c>
	/// labeled alternative in <see cref="ConditionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterComparatorExpression([NotNull] ConditionParser.ComparatorExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>comparatorExpression</c>
	/// labeled alternative in <see cref="ConditionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitComparatorExpression([NotNull] ConditionParser.ComparatorExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ConditionParser.comparator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterComparator([NotNull] ConditionParser.ComparatorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ConditionParser.comparator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitComparator([NotNull] ConditionParser.ComparatorContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ConditionParser.binary"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBinary([NotNull] ConditionParser.BinaryContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ConditionParser.binary"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBinary([NotNull] ConditionParser.BinaryContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ConditionParser.bool"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBool([NotNull] ConditionParser.BoolContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ConditionParser.bool"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBool([NotNull] ConditionParser.BoolContext context);
}
} // namespace dittlassian.Utilities.ConditionParser
